import cpu { CPU, Terminal }
import mmu { MMU }
import cartridge { Cartridge }

class System {
    public cpu: CPU
    mmu: MMU

    public function init(filename: String) throws -> System {
        mut file = File::open_for_reading(filename)
        let buffer = file.read_all()
        let cartridge = Cartridge::load(buffer)
        mut cpu = CPU::init(terminal: Terminal::GB, debug: false)
        mut mmu = MMU::init(cartridge)
        return System(cpu, mmu)
    }

    public function tick(mut this) throws -> u32 {
        if .mmu.read(addr: .cpu.pc) == 0x10 {
            println("SWITCH SPEED")
        }
        let cycles = .cpu.tick(mmu: &mut .mmu)
        .mmu.tick(cycles)
        return cycles
    }

    public function run(mut this) throws {
        loop {
            let cycles = .tick()
            // println("Cycles {}", cycles)
            // if .cpu.ticks >= 2000 {
            //     .cpu.halted = true
            // }
            if .cpu.halted {
                break
            }
        }
        
        // println("END OF 2000 instructions")
    }
}