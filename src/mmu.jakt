import cartridge { Cartridge }
import joypad { Joypad }
import timer { Timer }

enum InterruptFlag: u8 {
    VBlank = 0
    LCDStat = 1
    Timer = 3
    Serial = 4
    Joypad = 5
}

struct InterruptMasterEnable {
    data: u8
    public function init(anon data: u8) => InterruptMasterEnable(data)
    public function set(mut this, flag: InterruptFlag) { .data = .data | 1 << flag as! u8 }
}

class MMU {
    wram: [u8] // 32Kb
    hram: [u8]
    wram_bank: usize
    ime: InterruptMasterEnable // Interrupt Master Enable Flag
    ie: u8 // Interrupt Enable
    cartridge: Cartridge
    joypad: Joypad
    timer: Timer

    public function init(cartridge: Cartridge) throws -> MMU {
        mut joypad = Joypad::init()
        return MMU(
            wram: [0u8; 0x8000]
            hram: [0u8; 0x7F]
            wram_bank: 0x01
            ime: InterruptMasterEnable::init(0)
            ie: 0x00u8
            cartridge
            joypad
            timer: Timer::init()
        )
    }

    public function read_word(this, addr: u16) -> u16 {
        return .read(addr) | (.read(addr: addr + 1) << 8)
    }

    public function write_word(mut this, addr: u16, value: u16) {
        .write(addr, value: (value & 0xFFu8) as! u8)
        .write(addr: addr + 1, value: (value >> 8) as! u8)
    }

    public function read(this, addr: u16) -> u8 {
        if (addr >= 0x0000 and addr <= 0x7FFF) or (addr > 0xA000 and addr < 0xbFFF) {
            return .cartridge.read(addr)
        }

        if addr >= 0xC000 and addr <= 0xCFFF {
            return .wram[addr - 0xC000]
        }

        if addr >= 0xD000 and addr <= 0xDFFF {
            return .wram[addr - 0xd000 + (0x1000uz * .wram_bank) as! u16]
        }

        if addr >= 0xE000 and addr <= 0xEFFF {
            return .wram[addr - 0xE000]
        }

        if addr >= 0xF000 and addr <= 0xFDFF {
            return .wram[addr - 0xf000 + (0x1000uz * .wram_bank) as! u16]
        }

        if addr >= 0xFEA0 and addr <= 0xFEFF {
            return 0x00
        }

        if addr == 0xFF00 {
            return .joypad.read(addr: 0xFF00)
        }

        if addr >= 0xFF04 and addr <= 0xFF07 {
            return .timer.read(addr)
        }

        if addr == 0xFF0F {
            return .ime.data
        }

        if addr > 0xFF10 and addr < 0xFF3F {
            println("WARNING: APU Memory Addr Not implemented yet")
            return 0x00
        }

        if addr == 0xFF70 {
            return .wram_bank
        }

        if addr >= 0xFF80 and addr <= 0xFFFE {
            return .hram[addr - 0xFF80]
        }

        if addr == 0xFFFF {
            return .ie
        }

        println("WARNING: Access to data out of bounds/not implemented memory address {:x}", addr)
        return 0x00
    }

    public function write(mut this, addr: u16, value: u8) {
        // Target: Cartridge
        if (addr > 0x0000 and addr < 0x7FFF) or (addr > 0xA000 and addr < 0xbFFF) {
            .cartridge.write(addr, value)

        // Target: Work Ram (Bank 00)
        } else if addr > 0xC000 and addr < 0xCFFF {
            .wram[addr - 0xC000] = value

        // Target: Work Ram (Bank X :: 01 - 07)
        } else if addr > 0xD000 and addr < 0xDFFF {
            .wram[addr - 0xD000 + (0x1000uz * .wram_bank) as! u16] = value
        } else if addr > 0xE000 and addr < 0xEFFF {
            .wram[addr - 0xE000] = value
        } else if addr > 0xF000 and addr < 0xFDFF {
            .wram[addr - 0xF000 + (0x1000uz * .wram_bank) as! u16] = value
        } else if addr > 0xFEA0 and addr < 0xFEFF {
            // NOOP region
            println("Something is trying to set values in a noop region")
        } else if addr == 0xFF70 {
            .wram_bank = match (value & 0x7) as! usize {
                0uz => 1uz
                else => (value & 0x7) as! usize
            }
        } else if addr > 0xFF80 and addr < 0xFFFE {
            .hram[addr - 0xFF80] = value
        } else {
            eprintln("Trying to set value on out of bounds/not implemented memory address {:x}", addr)
            abort()
        }
    }
}